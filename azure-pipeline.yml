trigger:
- master

#variables:
#- group: storage_account

pool:
  vmImage: ubuntu-latest

stages:
- stage: GetTerraformFiles
  jobs:
  - job: GetTerraformFiles
    steps:
    - task: CopyFiles@2
      displayName: 'Copy terraform files to artifacts'
      inputs:
        sourceFolder: 7_pipeline_arch
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        pathToPublish: '$(build.artifactstagingdirectory)'
        artifactName: artifacts

- stage: Terraform
  dependsOn: GetTerraformFiles
  jobs:
  - job: Terraform
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: 'Download artifacts'
      inputs:
        builtType: 'current'
        downloadType: 'single'
        artifactName: artifacts
        downloadPath: '$(system.defaultworkingdirectory)'
    - task: AzureKeyVault@2
      displayName: 'Get secrets from vault'
      inputs:
        azureSubscription: azure-devops-keyvault
        keyVaultName: 'zalaVault'
        secretsFilter: '*'
        runAsPreJob: false
    - task: CmdLine@2
      displayName: 'Generate backend.conf'
      inputs:
        script: |
          cd $(system.defaultworkingdirectory)/artifacts/Terraform
          touch backend.conf
          echo "storage_account_name=$(storage_account_name)" >> backend.conf
          cat backend.conf
    #- task: replacetokens@3
      #displayName: 'Replace tokens in Terraform file'
      #inputs:
        #targetFiles: '**/*tf'
        #escapeType: none
        #tokenPrefix: '<'
        #tokenSuffix: '>'
    - task: CmdLine@2
      displayName: 'Test main.tf'
      inputs:
        script: cat $(system.defaultworkingdirectory)/artifacts/Terraform/main.tf
    - task: TerraformInstaller@0
      displayName: 'Terraform INSTALL'
      inputs:
        terraformVersion: '1.0.0'
    #- task: TerraformTaskV2@2
      #displayName: 'Terraform INIT'
      #inputs:
        #provider: 'azurerm'
        #command: 'init'
        #workingDirectory: '$(system.defaultworkingdirectory)/artifacts/Terraform'
        #backendServiceArm: 'azure-devops-keyvault'
        #backendAzureRmResourceGroupName: 'vaultRG'
        #backendAzureRmStorageAccountName: $(storage_account_name)
        #backendAzureRmContainerName: $(container_name)
        #backendAzureRmKey: 'terraform.tfstate'
    #- task: TerraformTaskV2@2
      #displayName: 'Terraform VALIDATE'
      #inputs:
        #provider: 'azurerm'
        #command: 'validate'
        #workingDirectory: '$(system.defaultworkingdirectory)/artifacts/Terraform'
        #environmentServiceNameAzureRM: 'azure-devops'
        #backendAzureRmResourceGroupName: 'vaultRG'
        #backendAzureRmStorageAccountName: $(storage_account_name)
        #backendAzureRmContainerName: $(container_name)
        #backendAzureRmKey: 'terraform.tfstate'
    #- task: TerraformTaskV2@2
      #displayName: 'Terraform PLAN'
      #inputs:
        #command: 'plan'
        #workingDirectory: '$(system.defaultworkingdirectory)/artifacts/Terraform'
        #environmentServiceNameAzureRM: 'azure-devops'
        #backendAzureRmResourceGroupName: 'vaultRG'
        #backendAzureRmStorageAccountName: $(storage_account_name)
        #backendAzureRmContainerName: $(container_name)
        #backendAzureRmKey: 'terraform.tfstate'
    #- task: TerraformTaskV2@2
      #displayName: 'Terraform APPLY'
      #inputs:
        #command: 'apply'
        #workingDirectory: '$(system.defaultworkingdirectory)/artifacts/Terraform'
        #commandOptions: '--auto-approve'
        #environmentServiceNameAzureRM: 'azure-devops'
        #backendAzureRmResourceGroupName: 'vaultRG'
        #backendAzureRmStorageAccountName: $(storage_account_name)
        #backendAzureRmContainerName: $(container_name)
        #backendAzureRmKey: 'terraform.tfstate'
