trigger:
- master

variables:
- group: ANSIBLE

stages:
- stage: Terraform
  pool:
    name: Demo
    demands:
    - agent.name -equals agent
  jobs:
  - job: BuildInfra
    steps:
    - task: DownloadSecureFile@1
      displayName: 'Download backend.conf file'
      name: backend
      inputs:
        secureFile: 'backend.conf'
    - task: DownloadSecureFile@1
      displayName: 'Download terraform.tfvars file'
      name: tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    - task: DownloadSecureFile@1
      displayName: 'Download my public ssh key'
      name: mySshKey
      inputs:
        secureFile: 'id_rsa.pub'
    - task: DownloadSecureFile@1
      displayName: 'Download agent public ssh key'
      name: agentSshKey
      inputs:
        secureFile: 'agent.pub'
    - task: CmdLine@2
      displayName: 'Terraform PRESTEPS'
      inputs:
        script: |
          mv $(backend.secureFilePath) $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
          mv $(tfvars.secureFilePath) $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
          mv $(mySshKey.secureFilePath) $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
          mv $(agentSshKey.secureFilePath) $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
    - task: TerraformInstaller@0
      displayName: 'Terraform INSTALL'
      inputs:
        terraformVersion: '1.0.0'
    - task: TerraformCLI@0
      displayName: 'Terraform INIT'
      inputs:
        command: init
        workingDirectory: $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
        commandOptions: '-backend-config=backend.conf'
        backendType: selfConfigured
    - task: TerraformCLI@0
      displayName: 'Terraform VALIDATE'
      inputs:
        command: validate
        workingDirectory: $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
    - task: TerraformCLI@0
      displayName: 'Terraform PLAN'
      inputs:
        command: plan
        commandOptions: '-out terraform.tfstate'
        workingDirectory: $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/
    - task: TerraformCLI@0
      displayName: 'Terraform APPLY'
      inputs:
        command: apply
        commandOptions: '-auto-approve'
        workingDirectory: $(system.defaultworkingdirectory)/7_pipeline_arch/terraform/

- stage: Ansible
  dependsOn: Terraform
  pool:
    name: Demo
    demands:
    - agent.name -equals ag03
  jobs:
  - job: ConfigureInfra
    steps:
    - task: CmdLine@2
      displayName: 'Get AppGtw IP'
      inputs:
        script: |
          RESULT=$(az network public-ip show -n wordpressIP -g azdevopsRG --query '{ipAddress:ipAddress}')
          appGtwIp=$(echo $RESULT | grep -oP '\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}')
          echo "##vso[task.setvariable variable=appGtwIp]$appGtwIp"
    - task: Ansible@0
      displayName: 'Update/Upgrade vms'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_init.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
    - task: Ansible@0
      displayName: 'Preparing db'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_dbs.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
        args: '--extra-vars "db_pass=$(DB_PASS) db_user=$(DB_USER) db_name=$(DB_NAME)"'
    - task: Ansible@0
      displayName: 'Installing node tools'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_vms.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
    - task: Ansible@0
      displayName: 'Installing wordpress'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_wordpress.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
        args: '--extra-vars "db_pass=$(DB_PASS) db_user=$(DB_USER) db_name=$(DB_NAME) db_host=$(DB_HOST)"'
    - task: Ansible@0
      displayName: 'Configure wordpress admin'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_wordpress_admin.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
        args: '--extra-vars "wp_user=$(WP_USER) wp_pass=$(WP_PASS) wp_user_email=$(WP_USER_EMAIL) appGtwIp=$(appGtwIp)"'
    - task: Ansible@0
      displayName: 'Configure node01'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_node01.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
    - task: Ansible@0
      displayName: 'Configure node02'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/playbook_node02.yml
        inventoriesAgentMachine: file
        inventoryFileOnAgentMachine: $(system.defaultworkingdirectory)/7_pipeline_arch/ansible/inventory_azure_rm.yml
        sudoEnabled: true
